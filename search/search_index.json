{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to maeson","text":"<p>Geospatial software for raster and point cloud processing.</p> <p>Sure! Here's the <code>homepage.md</code> in proper Markdown format:</p>"},{"location":"#welcome-to-maeson_1","title":"Welcome to MAESon \ud83c\udf0d\ud83e\udd16","text":"<p>MAESon (Machine Learning and Artificial Intelligence for Earth Science) is an open-source geospatial software package that harnesses the power of AI and machine learning to analyze Earth science data. Whether you're working with remote sensing imagery, hydrological models, or ecological datasets, MAESon provides cutting-edge tools to extract meaningful insights.</p>"},{"location":"#why-maeson","title":"Why MAESon? \ud83d\ude80","text":"<ul> <li>AI-Powered Geospatial Analysis: Integrates machine learning models for classification, prediction, and feature extraction.</li> <li>Remote Sensing Support: Works with multispectral, hyperspectral, and LiDAR data.</li> <li>Hydrological &amp; Ecological Tools: Analyze land cover, water bodies, and vegetation changes.</li> <li>Seamless GIS Integration: Compatible with GDAL, QGIS, and other geospatial tools.</li> <li>Open-Source &amp; Community-Driven: Built for researchers, by researchers.</li> </ul>"},{"location":"#getting-started","title":"Getting Started \ud83d\udca1","text":"<p>Ready to dive in? Follow these steps to set up MAESon on your machine:</p>"},{"location":"#1-install-maeson","title":"1. Install MAESon","text":"<pre><code>pip install maeson\n</code></pre>"},{"location":"#2-load-your-data","title":"2. Load Your Data","text":"<pre><code>import maeson\ndata = maeson.load_raster(\"path/to/your/data.tif\")\n</code></pre>"},{"location":"#3-run-analysis","title":"3. Run Analysis","text":"<pre><code>result = maeson.process_raster(data, model=\"random_forest\")\n</code></pre>"},{"location":"#learn-more","title":"Learn More \ud83d\udcda","text":"<ul> <li>Installation Guide \u2013 Step-by-step setup instructions.</li> <li>User Guide \u2013 Explore core functionalities and examples.</li> <li>API Reference \u2013 Detailed documentation on available methods.</li> <li>Contributing \u2013 Join the MAESon development community!</li> </ul>"},{"location":"#stay-connected","title":"Stay Connected \ud83d\udcac","text":"<ul> <li>GitHub: github.com/yourusername/MAESon</li> <li>Discussions &amp; Issues: Submit questions, feature requests, or bug reports.</li> <li>Community Contributions: Help improve MAESon by contributing code, documentation, or use cases.</li> </ul> <p>\ud83d\ude80 Get started today and bring AI-powered insights to your geospatial data!</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#maeson.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>maeson/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing to MAESon \ud83e\udd1d\ud83d\ude80","text":"<p>Thank you for your interest in contributing to MAESon! We welcome contributions of all kinds, including bug fixes, new features, documentation improvements, and discussions.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute \ud83d\udccc","text":""},{"location":"contributing/#1-fork-the-repository","title":"1. Fork the Repository","text":"<p>Click the Fork button at the top of the MAESon GitHub repository, and clone it to your local machine: <pre><code>git clone https://github.com/yourusername/MAESon.git\ncd MAESon\n</code></pre></p>"},{"location":"contributing/#2-create-a-branch","title":"2. Create a Branch","text":"<p>Create a new branch for your feature or bug fix: <pre><code>git checkout -b feature-xyz\n</code></pre></p>"},{"location":"contributing/#3-install-dependencies","title":"3. Install Dependencies","text":"<p>Ensure you have all necessary dependencies installed: <pre><code>pip install -r requirements.txt\n</code></pre> For development, install additional dependencies: <pre><code>pip install -r requirements-dev.txt\n</code></pre></p>"},{"location":"contributing/#4-make-your-changes","title":"4. Make Your Changes","text":"<p>Modify the codebase and test your changes. If adding a new feature, update the documentation accordingly.</p>"},{"location":"contributing/#5-run-tests","title":"5. Run Tests \u2705","text":"<p>Ensure all tests pass before submitting a pull request: <pre><code>pytest\n</code></pre></p>"},{"location":"contributing/#6-commit-and-push-changes","title":"6. Commit and Push Changes","text":"<pre><code>git add .\ngit commit -m \"Add feature XYZ\"\ngit push origin feature-xyz\n</code></pre>"},{"location":"contributing/#7-submit-a-pull-request","title":"7. Submit a Pull Request","text":"<p>Go to the MAESon repository on GitHub, navigate to the Pull Requests tab, and submit a new pull request. Provide a clear description of the changes you've made.</p>"},{"location":"contributing/#reporting-issues","title":"Reporting Issues \ud83d\udc1e","text":"<p>If you encounter a bug, please report it by opening an issue on GitHub Issues. Provide as much detail as possible, including: - Steps to reproduce the issue - Expected behavior - Actual behavior - Screenshots or error logs (if applicable)</p>"},{"location":"contributing/#code-style-guidelines","title":"Code Style Guidelines \u2728","text":"<ul> <li>Follow PEP 8 for Python code style.</li> <li>Use type hints where applicable.</li> <li>Write docstrings for all functions and classes.</li> </ul>"},{"location":"contributing/#documentation-contributions","title":"Documentation Contributions \ud83d\udcd6","text":"<p>We also welcome contributions to our documentation! If you'd like to improve or add new sections, edit the markdown files in the <code>docs/</code> directory and submit a pull request.</p>"},{"location":"contributing/#join-the-discussion","title":"Join the Discussion \ud83d\udcac","text":"<p>Want to discuss a feature before implementing it? Join the Discussions tab or open an issue to propose new ideas!</p> <p>\ud83d\ude80 Thank you for contributing to MAESon! Your support helps make geospatial AI more accessible and powerful.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation Guide for MAESon \ud83d\udce6\ud83d\ude80","text":"<p>MAESon is available on PyPI, making it easy to install and use. Follow the steps below to set up MAESon on your system.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites \ud83d\udee0","text":"<p>Before installing MAESon, ensure you have the following: - Python 3.8+ installed on your system - pip (Python package manager) updated to the latest version - Recommended: A virtual environment (e.g., <code>venv</code> or <code>conda</code>) for package management</p>"},{"location":"installation/#installation-instructions","title":"Installation Instructions \ud83d\udcbe","text":""},{"location":"installation/#1-install-via-pypi","title":"1. Install via PyPI","text":"<p>To install the latest stable release of MAESon, run: <pre><code>pip install maeson\n</code></pre></p>"},{"location":"installation/#2-verify-installation","title":"2. Verify Installation","text":"<p>To check if MAESon was installed successfully, run: <pre><code>import maeson\nprint(maeson.__version__)\n</code></pre> This should return the installed version of MAESon.</p>"},{"location":"installation/#3-optional-install-additional-dependencies","title":"3. Optional: Install Additional Dependencies","text":"<p>If you plan to use advanced features such as deep learning models or high-performance processing, install additional dependencies: <pre><code>pip install maeson[full]\n</code></pre></p>"},{"location":"installation/#upgrading-maeson","title":"Upgrading MAESon \ud83d\udd04","text":"<p>To update MAESon to the latest version, use: <pre><code>pip install --upgrade maeson\n</code></pre></p>"},{"location":"installation/#uninstalling-maeson","title":"Uninstalling MAESon \u274c","text":"<p>If you need to remove MAESon from your system, run: <pre><code>pip uninstall maeson\n</code></pre></p>"},{"location":"installation/#troubleshooting","title":"Troubleshooting \u2753","text":"<p>If you encounter any issues: - Ensure pip and setuptools are up to date:   <pre><code>pip install --upgrade pip setuptools\n</code></pre> - Check for missing dependencies and install them manually. - Report issues on GitHub Issues.</p> <p>\ud83d\ude80 You're now ready to use MAESon! Head over to the User Guide to get started.</p>"},{"location":"maeson/","title":"maeson module","text":"<p>Main module.</p>"},{"location":"maeson/#maeson.maeson.FMap","title":"<code> FMap            (Map)         </code>","text":"Source code in <code>maeson/maeson.py</code> <pre><code>class FMap(folium.Map):\n    def __init__(self, center=[20, 0], zoom=2, **kwargs):\n        super(Map, self).__init__(location=center, zoom_start=zoom, **kwargs)\n\n    def add_basemap(self, basemap=\"Esri.WorldImagery\"):\n        \"\"\"\n        Args:\n            basemap (str): Basemap name. Default is \"Esri.WorldImagery\".\n        \"\"\"\n        \"\"\"Add a basemap to the map.\"\"\"\n        basemaps = [\n            \"OpenStreetMap.Mapnik\",\n            \"Stamen.Terrain\",\n            \"Stamen.TerrainBackground\",\n            \"Stamen.Watercolor\",\n            \"Esri.WorldImagery\",\n            \"Esri.DeLorme\",\n            \"Esri.NatGeoWorldMap\",\n            \"Esri.WorldStreetMap\",\n            \"Esri.WorldTopoMap\",\n            \"Esri.WorldGrayCanvas\",\n            \"Esri.WorldShadedRelief\",\n            \"Esri.WorldPhysical\",\n            \"Esri.WorldTerrain\",\n            \"Google.Satellite\",\n            \"Google.Street\",\n            \"Google.Hybrid\",\n            \"Google.Terrain\",\n        ]\n        url = eval(f\"folium.basemaps.{basemap}\").build_url()\n        folium.TileLayer(url=url, name=basemap).add_to(self)\n\n    def add_layer(self, layer) -&gt; None:\n        \"\"\"\n        Args:\n            layer (folium.Layer): Layer to be added to the map.\n            **kwargs: Additional arguments for the layer.\n        Returns:\n            None\n        Raises:\n            ValueError: If the layer is not an instance of folium.Layer.\n        \"\"\"\n        \"\"\"Add a layer to the map.\"\"\"\n        if isinstance(layer, folium.Layer):\n            layer.add_to(self)\n        else:\n            raise ValueError(\"Layer must be an instance of folium.Layer\")\n\n    def add_control(self, control) -&gt; None:\n        \"\"\"\n        Args:\n            control (folium.Control): Control to be added to the map.\n            **kwargs: Additional arguments for the control.\n        Returns:\n            None\n        Raises:\n            ValueError: If the control is not an instance of folium.Control.\n        \"\"\"\n        \"\"\"Add a control to the map.\"\"\"\n        if isinstance(control, folium.Control):\n            control.add_to(self)\n        else:\n            raise ValueError(\"Control must be an instance of folium.Control\")\n\n    def add_raster(self, filepath, **kwargs):\n        \"\"\"\n        Args:\n            filepath (str): URL to the raster file.\n            **kwargs: Additional arguments for the ImageOverlay.\n        \"\"\"\n        \"\"\"Add a raster layer to the map.\"\"\"\n        raster_layer = folium.raster_layers.ImageOverlay(url=filepath, **kwargs)\n        raster_layer.add_to(self)\n\n    def add_image(self, image, bounds=None, **kwargs):\n        \"\"\"\n        Args:\n            image (str): URL to the image file.\n            bounds (list): List of coordinates for the bounds of the image.\n            **kwargs: Additional arguments for the ImageOverlay.\n        1. [[lat1, lon1], [lat2, lon2]] for a rectangular area.\n        2. [[lat, lon]] for a single point.\n        \"\"\"\n        \"\"\"Add an image to the map.\"\"\"\n        if bounds is None:\n            bounds = [[-30, -60], [30, 60]]\n        image_layer = folium.raster_layers.ImageOverlay(\n            url=image, bounds=bounds, **kwargs\n        )\n        image_layer.add_to(self)\n\n    def add_vector(self, vector, **kwargs):\n        \"\"\"\n        Args:\n            vector (dict): Vector data.\n            **kwargs: Additional arguments for the GeoJSON layer.\n        \"\"\"\n        \"\"\"Add a vector layer to the map.\"\"\"\n        vector_layer = folium.GeoJson(data=vector, **kwargs)\n        vector_layer.add_to(self)\n</code></pre>"},{"location":"maeson/#maeson.maeson.FMap.add_basemap","title":"<code>add_basemap(self, basemap='Esri.WorldImagery')</code>","text":"<p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>Basemap name. Default is \"Esri.WorldImagery\".</p> <code>'Esri.WorldImagery'</code> Source code in <code>maeson/maeson.py</code> <pre><code>def add_basemap(self, basemap=\"Esri.WorldImagery\"):\n    \"\"\"\n    Args:\n        basemap (str): Basemap name. Default is \"Esri.WorldImagery\".\n    \"\"\"\n    \"\"\"Add a basemap to the map.\"\"\"\n    basemaps = [\n        \"OpenStreetMap.Mapnik\",\n        \"Stamen.Terrain\",\n        \"Stamen.TerrainBackground\",\n        \"Stamen.Watercolor\",\n        \"Esri.WorldImagery\",\n        \"Esri.DeLorme\",\n        \"Esri.NatGeoWorldMap\",\n        \"Esri.WorldStreetMap\",\n        \"Esri.WorldTopoMap\",\n        \"Esri.WorldGrayCanvas\",\n        \"Esri.WorldShadedRelief\",\n        \"Esri.WorldPhysical\",\n        \"Esri.WorldTerrain\",\n        \"Google.Satellite\",\n        \"Google.Street\",\n        \"Google.Hybrid\",\n        \"Google.Terrain\",\n    ]\n    url = eval(f\"folium.basemaps.{basemap}\").build_url()\n    folium.TileLayer(url=url, name=basemap).add_to(self)\n</code></pre>"},{"location":"maeson/#maeson.maeson.FMap.add_control","title":"<code>add_control(self, control)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>control</code> <code>folium.Control</code> <p>Control to be added to the map.</p> required <code>**kwargs</code> <p>Additional arguments for the control.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the control is not an instance of folium.Control.</p> Source code in <code>maeson/maeson.py</code> <pre><code>def add_control(self, control) -&gt; None:\n    \"\"\"\n    Args:\n        control (folium.Control): Control to be added to the map.\n        **kwargs: Additional arguments for the control.\n    Returns:\n        None\n    Raises:\n        ValueError: If the control is not an instance of folium.Control.\n    \"\"\"\n    \"\"\"Add a control to the map.\"\"\"\n    if isinstance(control, folium.Control):\n        control.add_to(self)\n    else:\n        raise ValueError(\"Control must be an instance of folium.Control\")\n</code></pre>"},{"location":"maeson/#maeson.maeson.FMap.add_image","title":"<code>add_image(self, image, bounds=None, **kwargs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>image</code> <code>str</code> <p>URL to the image file.</p> required <code>bounds</code> <code>list</code> <p>List of coordinates for the bounds of the image.</p> <code>None</code> <code>**kwargs</code> <p>Additional arguments for the ImageOverlay.</p> <code>{}</code> <ol> <li>[[lat1, lon1], [lat2, lon2]] for a rectangular area.</li> <li>[[lat, lon]] for a single point.</li> </ol> Source code in <code>maeson/maeson.py</code> <pre><code>def add_image(self, image, bounds=None, **kwargs):\n    \"\"\"\n    Args:\n        image (str): URL to the image file.\n        bounds (list): List of coordinates for the bounds of the image.\n        **kwargs: Additional arguments for the ImageOverlay.\n    1. [[lat1, lon1], [lat2, lon2]] for a rectangular area.\n    2. [[lat, lon]] for a single point.\n    \"\"\"\n    \"\"\"Add an image to the map.\"\"\"\n    if bounds is None:\n        bounds = [[-30, -60], [30, 60]]\n    image_layer = folium.raster_layers.ImageOverlay(\n        url=image, bounds=bounds, **kwargs\n    )\n    image_layer.add_to(self)\n</code></pre>"},{"location":"maeson/#maeson.maeson.FMap.add_layer","title":"<code>add_layer(self, layer)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>layer</code> <code>folium.Layer</code> <p>Layer to be added to the map.</p> required <code>**kwargs</code> <p>Additional arguments for the layer.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the layer is not an instance of folium.Layer.</p> Source code in <code>maeson/maeson.py</code> <pre><code>def add_layer(self, layer) -&gt; None:\n    \"\"\"\n    Args:\n        layer (folium.Layer): Layer to be added to the map.\n        **kwargs: Additional arguments for the layer.\n    Returns:\n        None\n    Raises:\n        ValueError: If the layer is not an instance of folium.Layer.\n    \"\"\"\n    \"\"\"Add a layer to the map.\"\"\"\n    if isinstance(layer, folium.Layer):\n        layer.add_to(self)\n    else:\n        raise ValueError(\"Layer must be an instance of folium.Layer\")\n</code></pre>"},{"location":"maeson/#maeson.maeson.FMap.add_raster","title":"<code>add_raster(self, filepath, **kwargs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>URL to the raster file.</p> required <code>**kwargs</code> <p>Additional arguments for the ImageOverlay.</p> <code>{}</code> Source code in <code>maeson/maeson.py</code> <pre><code>def add_raster(self, filepath, **kwargs):\n    \"\"\"\n    Args:\n        filepath (str): URL to the raster file.\n        **kwargs: Additional arguments for the ImageOverlay.\n    \"\"\"\n    \"\"\"Add a raster layer to the map.\"\"\"\n    raster_layer = folium.raster_layers.ImageOverlay(url=filepath, **kwargs)\n    raster_layer.add_to(self)\n</code></pre>"},{"location":"maeson/#maeson.maeson.FMap.add_vector","title":"<code>add_vector(self, vector, **kwargs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>vector</code> <code>dict</code> <p>Vector data.</p> required <code>**kwargs</code> <p>Additional arguments for the GeoJSON layer.</p> <code>{}</code> Source code in <code>maeson/maeson.py</code> <pre><code>def add_vector(self, vector, **kwargs):\n    \"\"\"\n    Args:\n        vector (dict): Vector data.\n        **kwargs: Additional arguments for the GeoJSON layer.\n    \"\"\"\n    \"\"\"Add a vector layer to the map.\"\"\"\n    vector_layer = folium.GeoJson(data=vector, **kwargs)\n    vector_layer.add_to(self)\n</code></pre>"},{"location":"maeson/#maeson.maeson.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>maeson/maeson.py</code> <pre><code>class Map(ipyleaflet.Map):\n    def __init__(self, center=[20, 0], zoom=2, **kwargs):\n        super(Map, self).__init__(center=center, zoom=zoom, **kwargs)\n\n    def add_basemap(self, basemap=\"Esri.WorldImagery\"):\n        \"\"\"\n        Args:\n            basemap (str): Basemap name. Default is \"Esri.WorldImagery\".\n        \"\"\"\n        \"\"\"Add a basemap to the map.\"\"\"\n        basemaps = [\n            \"OpenStreetMap.Mapnik\",\n            \"Stamen.Terrain\",\n            \"Stamen.TerrainBackground\",\n            \"Stamen.Watercolor\",\n            \"Esri.WorldImagery\",\n            \"Esri.DeLorme\",\n            \"Esri.NatGeoWorldMap\",\n            \"Esri.WorldStreetMap\",\n            \"Esri.WorldTopoMap\",\n            \"Esri.WorldGrayCanvas\",\n            \"Esri.WorldShadedRelief\",\n            \"Esri.WorldPhysical\",\n            \"Esri.WorldTerrain\",\n            \"Google.Satellite\",\n            \"Google.Street\",\n            \"Google.Hybrid\",\n            \"Google.Terrain\",\n        ]\n        url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n        basemap_layer = ipyleaflet.TileLayer(url=url, name=basemap)\n        self.add(basemap_layer)\n\n    def layer(self, layer) -&gt; None:\n        \"\"\"\n        Args:\n            layer (str or dict): Layer to be added to the map.\n            **kwargs: Additional arguments for the layer.\n        Returns:\n            None\n        Raises:\n            ValueError: If the layer is not a valid type.\n        \"\"\"\n        \"\"\" Convert url to layer\"\"\"\n        if isinstance(layer, str):\n            layer = ipyleaflet.TileLayer(url=layer)\n        elif isinstance(layer, dict):\n            layer = ipyleaflet.GeoJSON(data=layer)\n        elif not isinstance(layer, ipyleaflet.Layer):\n            raise ValueError(\"Layer must be an instance of ipyleaflet.Layer\")\n        return layer\n\n    def add_layer_control(self, position=\"topright\") -&gt; None:\n        \"\"\"Adds a layer control to the map.\n\n        Args:\n            position (str, optional): The position of the layer control. Defaults to 'topright'.\n        \"\"\"\n\n        self.add(ipyleaflet.LayersControl(position=position))\n\n    def add_raster(self, filepath, **kwargs):\n        \"\"\"Add a raster layer to the map.\"\"\"\n        raster_layer = ipyleaflet.ImageOverlay(url=filepath, **kwargs)\n        self.add(raster_layer)\n\n    def add_image(self, image, bounds=None, **kwargs):\n        \"\"\"\n        Args:\n            image (str): URL to the image file.\n            bounds (list): List of coordinates for the bounds of the image.\n            **kwargs: Additional arguments for the ImageOverlay.\n        \"\"\"\n        \"\"\"Add an image to the map.\"\"\"\n        if bounds is None:\n            bounds = [[-90, -180], [90, 180]]\n        image_layer = ipyleaflet.ImageOverlay(url=image, bounds=bounds, **kwargs)\n        self.add(image_layer)\n\n    def add_geojson(self, geojson, **kwargs):\n        \"\"\"\n        Args:\n            geojson (dict): GeoJSON data.\n            **kwargs: Additional arguments for the GeoJSON layer.\n        \"\"\"\n        \"\"\"Add a GeoJSON layer to the map.\"\"\"\n        geojson_layer = ipyleaflet.GeoJSON(data=geojson, **kwargs)\n        self.add(geojson_layer)\n\n    def add_video(self, video, bounds=None, **kwargs):\n        \"\"\"\n        Args:\n            video (str): URL to the video file.\n            bounds (list): List of coordinates for the bounds of the video.\n            **kwargs: Additional arguments for the VideoOverlay.\n        \"\"\"\n        \"\"\"Add a video layer to the map.\"\"\"\n        if bounds is None:\n            bounds = [[-90, -180], [90, 180]]\n        video_layer = ipyleaflet.VideoOverlay(url=video, bounds=bounds, **kwargs)\n        self.add(video_layer)\n\n    def zoom_to(self, bounds):\n        \"\"\"\n        Args:\n            bounds (list): List of coordinates for the bounds to zoom to.\n        1. [[lat1, lon1], [lat2, lon2]] for a rectangular area.\n        2. [[lat, lon]] for a single point.\n        \"\"\"\n        \"\"\"Zoom to the given bounds.\"\"\"\n        if len(bounds) == 1:\n            # Single point\n            bounds = [\n                [bounds[0][0] - 0.01, bounds[0][1] - 0.01],\n                [bounds[0][0] + 0.01, bounds[0][1] + 0.01],\n            ]\n        elif len(bounds) == 2:\n            # Rectangular area\n            bounds = [\n                [bounds[0][0] - 0.01, bounds[0][1] - 0.01],\n                [bounds[1][0] + 0.01, bounds[1][1] + 0.01],\n            ]\n        else:\n            raise ValueError(\"Bounds must be a list of coordinates.\")\n        self.fit_bounds(bounds)\n\n    def add_wms(self, url, layers, **kwargs):\n        \"\"\"\n        Args:\n            url (str): URL to the WMS service.\n            layers (str): Comma-separated list of layers to be added.\n            **kwargs: Additional arguments for the WMS layer.\n        \"\"\"\n        \"\"\"Add a WMS layer to the map.\"\"\"\n        wms_layer = ipyleaflet.WMSLayer(url=url, layers=layers, **kwargs)\n        self.add(wms_layer)\n\n    def add_vector(self, vector, **kwargs):\n        \"\"\"\n        Args:\n            vector (dict): Vector data.\n            **kwargs: Additional arguments for the GeoJSON layer.\n        \"\"\"\n        \"\"\"Add a vector layer to the map from Geopandas.\"\"\"\n        vector_layer = ipyleaflet.GeoJSON(data=vector, **kwargs)\n        self.add(vector_layer)\n</code></pre>"},{"location":"maeson/#maeson.maeson.Map.add_basemap","title":"<code>add_basemap(self, basemap='Esri.WorldImagery')</code>","text":"<p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>Basemap name. Default is \"Esri.WorldImagery\".</p> <code>'Esri.WorldImagery'</code> Source code in <code>maeson/maeson.py</code> <pre><code>def add_basemap(self, basemap=\"Esri.WorldImagery\"):\n    \"\"\"\n    Args:\n        basemap (str): Basemap name. Default is \"Esri.WorldImagery\".\n    \"\"\"\n    \"\"\"Add a basemap to the map.\"\"\"\n    basemaps = [\n        \"OpenStreetMap.Mapnik\",\n        \"Stamen.Terrain\",\n        \"Stamen.TerrainBackground\",\n        \"Stamen.Watercolor\",\n        \"Esri.WorldImagery\",\n        \"Esri.DeLorme\",\n        \"Esri.NatGeoWorldMap\",\n        \"Esri.WorldStreetMap\",\n        \"Esri.WorldTopoMap\",\n        \"Esri.WorldGrayCanvas\",\n        \"Esri.WorldShadedRelief\",\n        \"Esri.WorldPhysical\",\n        \"Esri.WorldTerrain\",\n        \"Google.Satellite\",\n        \"Google.Street\",\n        \"Google.Hybrid\",\n        \"Google.Terrain\",\n    ]\n    url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n    basemap_layer = ipyleaflet.TileLayer(url=url, name=basemap)\n    self.add(basemap_layer)\n</code></pre>"},{"location":"maeson/#maeson.maeson.Map.add_geojson","title":"<code>add_geojson(self, geojson, **kwargs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>geojson</code> <code>dict</code> <p>GeoJSON data.</p> required <code>**kwargs</code> <p>Additional arguments for the GeoJSON layer.</p> <code>{}</code> Source code in <code>maeson/maeson.py</code> <pre><code>def add_geojson(self, geojson, **kwargs):\n    \"\"\"\n    Args:\n        geojson (dict): GeoJSON data.\n        **kwargs: Additional arguments for the GeoJSON layer.\n    \"\"\"\n    \"\"\"Add a GeoJSON layer to the map.\"\"\"\n    geojson_layer = ipyleaflet.GeoJSON(data=geojson, **kwargs)\n    self.add(geojson_layer)\n</code></pre>"},{"location":"maeson/#maeson.maeson.Map.add_image","title":"<code>add_image(self, image, bounds=None, **kwargs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>image</code> <code>str</code> <p>URL to the image file.</p> required <code>bounds</code> <code>list</code> <p>List of coordinates for the bounds of the image.</p> <code>None</code> <code>**kwargs</code> <p>Additional arguments for the ImageOverlay.</p> <code>{}</code> Source code in <code>maeson/maeson.py</code> <pre><code>def add_image(self, image, bounds=None, **kwargs):\n    \"\"\"\n    Args:\n        image (str): URL to the image file.\n        bounds (list): List of coordinates for the bounds of the image.\n        **kwargs: Additional arguments for the ImageOverlay.\n    \"\"\"\n    \"\"\"Add an image to the map.\"\"\"\n    if bounds is None:\n        bounds = [[-90, -180], [90, 180]]\n    image_layer = ipyleaflet.ImageOverlay(url=image, bounds=bounds, **kwargs)\n    self.add(image_layer)\n</code></pre>"},{"location":"maeson/#maeson.maeson.Map.add_layer_control","title":"<code>add_layer_control(self, position='topright')</code>","text":"<p>Adds a layer control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the layer control. Defaults to 'topright'.</p> <code>'topright'</code> Source code in <code>maeson/maeson.py</code> <pre><code>def add_layer_control(self, position=\"topright\") -&gt; None:\n    \"\"\"Adds a layer control to the map.\n\n    Args:\n        position (str, optional): The position of the layer control. Defaults to 'topright'.\n    \"\"\"\n\n    self.add(ipyleaflet.LayersControl(position=position))\n</code></pre>"},{"location":"maeson/#maeson.maeson.Map.add_raster","title":"<code>add_raster(self, filepath, **kwargs)</code>","text":"<p>Add a raster layer to the map.</p> Source code in <code>maeson/maeson.py</code> <pre><code>def add_raster(self, filepath, **kwargs):\n    \"\"\"Add a raster layer to the map.\"\"\"\n    raster_layer = ipyleaflet.ImageOverlay(url=filepath, **kwargs)\n    self.add(raster_layer)\n</code></pre>"},{"location":"maeson/#maeson.maeson.Map.add_vector","title":"<code>add_vector(self, vector, **kwargs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>vector</code> <code>dict</code> <p>Vector data.</p> required <code>**kwargs</code> <p>Additional arguments for the GeoJSON layer.</p> <code>{}</code> Source code in <code>maeson/maeson.py</code> <pre><code>def add_vector(self, vector, **kwargs):\n    \"\"\"\n    Args:\n        vector (dict): Vector data.\n        **kwargs: Additional arguments for the GeoJSON layer.\n    \"\"\"\n    \"\"\"Add a vector layer to the map from Geopandas.\"\"\"\n    vector_layer = ipyleaflet.GeoJSON(data=vector, **kwargs)\n    self.add(vector_layer)\n</code></pre>"},{"location":"maeson/#maeson.maeson.Map.add_video","title":"<code>add_video(self, video, bounds=None, **kwargs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>video</code> <code>str</code> <p>URL to the video file.</p> required <code>bounds</code> <code>list</code> <p>List of coordinates for the bounds of the video.</p> <code>None</code> <code>**kwargs</code> <p>Additional arguments for the VideoOverlay.</p> <code>{}</code> Source code in <code>maeson/maeson.py</code> <pre><code>def add_video(self, video, bounds=None, **kwargs):\n    \"\"\"\n    Args:\n        video (str): URL to the video file.\n        bounds (list): List of coordinates for the bounds of the video.\n        **kwargs: Additional arguments for the VideoOverlay.\n    \"\"\"\n    \"\"\"Add a video layer to the map.\"\"\"\n    if bounds is None:\n        bounds = [[-90, -180], [90, 180]]\n    video_layer = ipyleaflet.VideoOverlay(url=video, bounds=bounds, **kwargs)\n    self.add(video_layer)\n</code></pre>"},{"location":"maeson/#maeson.maeson.Map.add_wms","title":"<code>add_wms(self, url, layers, **kwargs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL to the WMS service.</p> required <code>layers</code> <code>str</code> <p>Comma-separated list of layers to be added.</p> required <code>**kwargs</code> <p>Additional arguments for the WMS layer.</p> <code>{}</code> Source code in <code>maeson/maeson.py</code> <pre><code>def add_wms(self, url, layers, **kwargs):\n    \"\"\"\n    Args:\n        url (str): URL to the WMS service.\n        layers (str): Comma-separated list of layers to be added.\n        **kwargs: Additional arguments for the WMS layer.\n    \"\"\"\n    \"\"\"Add a WMS layer to the map.\"\"\"\n    wms_layer = ipyleaflet.WMSLayer(url=url, layers=layers, **kwargs)\n    self.add(wms_layer)\n</code></pre>"},{"location":"maeson/#maeson.maeson.Map.layer","title":"<code>layer(self, layer)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>layer</code> <code>str or dict</code> <p>Layer to be added to the map.</p> required <code>**kwargs</code> <p>Additional arguments for the layer.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the layer is not a valid type.</p> Source code in <code>maeson/maeson.py</code> <pre><code>def layer(self, layer) -&gt; None:\n    \"\"\"\n    Args:\n        layer (str or dict): Layer to be added to the map.\n        **kwargs: Additional arguments for the layer.\n    Returns:\n        None\n    Raises:\n        ValueError: If the layer is not a valid type.\n    \"\"\"\n    \"\"\" Convert url to layer\"\"\"\n    if isinstance(layer, str):\n        layer = ipyleaflet.TileLayer(url=layer)\n    elif isinstance(layer, dict):\n        layer = ipyleaflet.GeoJSON(data=layer)\n    elif not isinstance(layer, ipyleaflet.Layer):\n        raise ValueError(\"Layer must be an instance of ipyleaflet.Layer\")\n    return layer\n</code></pre>"},{"location":"maeson/#maeson.maeson.Map.zoom_to","title":"<code>zoom_to(self, bounds)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>bounds</code> <code>list</code> <p>List of coordinates for the bounds to zoom to.</p> required <ol> <li>[[lat1, lon1], [lat2, lon2]] for a rectangular area.</li> <li>[[lat, lon]] for a single point.</li> </ol> Source code in <code>maeson/maeson.py</code> <pre><code>def zoom_to(self, bounds):\n    \"\"\"\n    Args:\n        bounds (list): List of coordinates for the bounds to zoom to.\n    1. [[lat1, lon1], [lat2, lon2]] for a rectangular area.\n    2. [[lat, lon]] for a single point.\n    \"\"\"\n    \"\"\"Zoom to the given bounds.\"\"\"\n    if len(bounds) == 1:\n        # Single point\n        bounds = [\n            [bounds[0][0] - 0.01, bounds[0][1] - 0.01],\n            [bounds[0][0] + 0.01, bounds[0][1] + 0.01],\n        ]\n    elif len(bounds) == 2:\n        # Rectangular area\n        bounds = [\n            [bounds[0][0] - 0.01, bounds[0][1] - 0.01],\n            [bounds[1][0] + 0.01, bounds[1][1] + 0.01],\n        ]\n    else:\n        raise ValueError(\"Bounds must be a list of coordinates.\")\n    self.fit_bounds(bounds)\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use maeson in a project:</p> <pre><code>import maeson\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print(\"Hello World!\")\n</pre> print(\"Hello World!\") <pre>Hello World!\n</pre>"}]}